import tensorflow as tf
import numpy as np
import cv2
import tkinter as tk
from tkinter import filedialog

# T·∫£i m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
model = tf.keras.models.load_model("model.h5")

# Danh s√°ch nh√£n (theo th·ª© t·ª± khi hu·∫•n luy·ªán)
class_labels = ['cardboard', 'glass', 'metal', 'paper', 'plastic', 'trash']


def predict_trash(image_path):
    # ƒê·ªçc ·∫£nh
    img = cv2.imread(image_path)
    if img is None:
        print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh. H√£y ki·ªÉm tra ƒë∆∞·ªùng d·∫´n!")
        return

    # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Chuy·ªÉn sang RGB
    img = cv2.resize(img, (224, 224))  # Resize v·ªÅ k√≠ch th∆∞·ªõc ph√π h·ª£p
    img = img / 255.0  # Chu·∫©n h√≥a v·ªÅ kho·∫£ng [0,1]
    img = np.expand_dims(img, axis=0)  # Th√™m batch dimension

    # D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh
    predictions = model.predict(img)
    predicted_class_idx = np.argmax(predictions)  # L·∫•y nh√£n c√≥ x√°c su·∫•t cao nh·∫•t
    predicted_class = class_labels[predicted_class_idx]
    confidence = predictions[0][predicted_class_idx] * 100  # X√°c su·∫•t %

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"üóëÔ∏è Lo·∫°i r√°c d·ª± ƒëo√°n: {predicted_class} ({confidence:.2f}%)")
    cv2.imshow(f"Prediction: {predicted_class} ({confidence:.2f}%)", cv2.imread(image_path))
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def select_image():
    root = tk.Tk()
    root.withdraw()  # ·∫®n c·ª≠a s·ªï ch√≠nh
    file_path = filedialog.askopenfilename(title="Ch·ªçn ·∫£nh r√°c", filetypes=[("Image Files", "*.jpg;*.jpeg;*.png")])
    if file_path:
        predict_trash(file_path)


if __name__ == "__main__":
    select_image()
